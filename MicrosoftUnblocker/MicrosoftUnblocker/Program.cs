using IWshRuntimeLibrary;
using System;
using System.Drawing;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;
using Microsoft.CSharp;

namespace MicrosoftUnblocker
{
    class Program
    {
        [STAThread]
        static void Main(string[] args)
        {
            OpenFileDialog fileDialog = new OpenFileDialog()
            {
                InitialDirectory = @"Desktop",
                Title = "Locate your executable",

                CheckFileExists = true,
                CheckPathExists = true,

                DefaultExt = "exe",
                Filter = "exe files (*.exe)|*.exe",
                FilterIndex = 2,
                RestoreDirectory = true
            };

            if (fileDialog.ShowDialog() != DialogResult.OK)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Error: No target file specified.");
                Console.ForegroundColor = ConsoleColor.Gray;

                Console.ReadKey();
                Environment.Exit(1);
            }

            string directory = $"C:\\Users\\{Environment.UserName}\\Desktop\\Unblocked";

            try
            {
                string currentKey = GetUniqueHash();

                string newLocation = fileDialog.FileName.Substring(0, fileDialog.FileName.LastIndexOf('\\') + 1) + currentKey + ".exe";

                string stripped = fileDialog.FileName.Substring(fileDialog.FileName.LastIndexOf('\\') + 1);
                string actualFileName = stripped.Substring(0, stripped.LastIndexOf('.'));

                Directory.CreateDirectory(directory);
                Directory.CreateDirectory(directory + "\\Icons");

                // Store the icon instance
                Icon theIcon = ExtractIconFromFilePath(fileDialog.FileName);

                // If the icon was extracted, proceed to save it
                if (theIcon != null)
                {
                    // Save the icon to the designated location
                    using (FileStream stream = new FileStream(directory + "\\Icons\\" + currentKey + ".ico", FileMode.CreateNew))
                    {
                        theIcon.Save(stream);
                    }
                }

                System.IO.File.Copy(fileDialog.FileName, newLocation);
                CreateShortcut(actualFileName, directory, newLocation, currentKey);
            }
            catch (Exception e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Error: " + e.Message);
                Console.ForegroundColor = ConsoleColor.Gray;

                Console.ReadKey();
                Environment.Exit(1);
            }

            Console.WriteLine("All files saved to: " + directory);
            Console.ReadKey();
        }

        public static string GetUniqueHash()
        {
            // Get the current timestamp, that is what we will hash
            int unixTimestamp = (int)DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds;

            SHA256 sha256Hash = SHA256.Create();

            // Convert the input string to a byte array and compute the hash.
            byte[] data = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(unixTimestamp.ToString()));

            // Create a new Stringbuilder to collect the bytes
            // and create a string.
            var sBuilder = new StringBuilder();

            // Loop through each byte of the hashed data
            // and format each one as a hexadecimal string.
            for (int i = 0; i < data.Length; i++)
            {
                sBuilder.Append(data[i].ToString("x2"));
            }

            return sBuilder.ToString();
        }

        public static void CreateShortcut(string shortcutName, string shortcutPath, string targetFileLocation, string currentKey)
        {
            string shortcutLocation = Path.Combine(shortcutPath, shortcutName + ".lnk");
            WshShell shell = new WshShell();
            IWshShortcut shortcut = (IWshShortcut)shell.CreateShortcut(shortcutLocation);

            shortcut.Description = shortcutName + " - Generated by MSF Unblocker";
            shortcut.IconLocation = shortcutPath + "\\Icons\\" + currentKey + ".ico";
            shortcut.TargetPath = targetFileLocation;
            shortcut.Arguments = "--app";
            shortcut.Save();
        }

        public static Icon ExtractIconFromFilePath(string executablePath)
        {
            Icon result = null;

            try
            {
                result = Icon.ExtractAssociatedIcon(executablePath);
            }
            catch (Exception)
            {
                Console.WriteLine("Unable to extract the icon from the binary");
            }

            return result;
        }
    }
}
